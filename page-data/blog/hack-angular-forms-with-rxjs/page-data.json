{"componentChunkName":"component---src-templates-post-page-template-js","path":"/blog/hack-angular-forms-with-rxjs/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Hack Angular Forms With Rxjs ðŸ”¥\",\n  \"date\": \"2020-05-17T00:00:00.000Z\",\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Why Forms?\"), mdx(\"p\", null, \"Forms are heavily used behavior inside your application you have to keep its values and validation rules under your custom control, in a simple easy way as you can. today we are going to talk about one tip for controlling forms in angular development. maybe change your life. \\uD83D\\uDE35\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://media.giphy.com/media/vykQomUCNUJg0NqpXx/giphy.gif\",\n    \"alt\": \"GIF\"\n  }))), mdx(\"h1\", null, \"Angular Forms\"), mdx(\"p\", null, \"If you are like me working daily with angular at least right now, you probably used or heard about Reactive Forms and Template Driven Forms and the fighting about which one I have to use?\"), mdx(\"h1\", null, \"What the Tips!\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"before angular, you maybe were using HTML with JQuery forms, or redux forms if you are a React guy and so on. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"since angular coming with Rxjs, so the tip is \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Observables\")), \" not Reactive or TD Forms, yeah we will discuss how to manage the forms by only observables and data binding nothing more.\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://media.giphy.com/media/co5nmPivPa42vv6IVm/giphy.gif\",\n    \"alt\": \"GIF\"\n  }))), mdx(\"h1\", null, \"Observable Based Form\"), mdx(\"p\", null, \"the simple idea is we have an observable at a form at the left-hand side and an observable at the right-hand side, and the process running on two data-binding, that's it!\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://media.giphy.com/media/tu54GM19sqJOw/giphy.gif\",\n    \"alt\": \"GIF\"\n  }))), mdx(\"p\", null, \"No worries, we will walk through an example, let's start!\\nyou know if you will use the reactive form approach you will need some configs at module level and dependencies at the component level, as an example:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app.module.ts\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"import {ReactiveFormsModule} from '@angular/forms';\\n\\n@NgModule({\\n  declarations: [...],\\n  imports: [ReactiveFormsModule],\\n  bootstrap: [AppComponent]\\n})\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"form.component.ts\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"import {FormGroup, FormBuilder} from '@angular/forms';\\n\\nexport class UserFormComponent {\\n  userForm: FormGroup;\\n\\n  // maybe OnInit instead, but it's okay we will never use \\uD83D\\uDE0B\\n  constructor(private fb: FormBuilder) {\\n    this.userForm = fb.group({\\n      // controls config\\n    })\\n  }\\n\\n  updateform = () => {\\n     this.userForm.patchValue({\\n       // new data config\\n     });\\n  }\\n\\n  resetForm = () => {\\n    this.userForm.reset();\\n  }\\n\\n  getFormValues = (): object { \\n    return this.userForm.value;\\n  }\\n}\\n\")), mdx(\"p\", null, \"and finally \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"form.componnet.html\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<form [formGroup]=\\\"userForm\\\">\\n  <input formControlName=\\\"...\\\">\\n  <input formControlName=\\\"...\\\">\\n<form>\\n\")), mdx(\"p\", null, \"in the above example as you see modules, dependencies, and configs for the form, in addition to the extra utilities for the update, reset and get value stuff, get here can bu also submit which is at the end the place you get the data and play with it.\\nthat's about the reactive forms approach as a reminder.\"), mdx(\"p\", null, \"Another way can do it with TD Forms since I didn't like it so we will never mention it's an example!\"), mdx(\"p\", null, \"ref: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://angular.io/guide/forms#building-a-template-driven-form\"\n  }), \"Angular TD Forms\"), \".\"), mdx(\"p\", null, \"#Now lets RX it!#\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://media.giphy.com/media/l3vRazsPc3L1RqAs8/giphy.gif\",\n    \"alt\": \"GIF\"\n  }))), mdx(\"p\", null, \"all that we need is a service as a source of truth for our approach, and the components can work with, yeah \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"COMPONENTS\"), \" not only form component that's the power of observables and data streaming. \\uD83D\\uDE80\\nto be honest, you can do you can get form data at any parent component by template reference also, but let us go with pure state management at Rxjs. so our service something like this:\"), mdx(\"p\", null, \"Note: you can find a complete example at Github.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state.service.ts\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"import {BehaviorSubject, Observable} from 'rxjs';\\n\\nexport class StateService {\\n  private userData$ = new BehaviorSubject<IUser>(new User());\\n  \\n  public setUserData = (userData: IUser) => this.userData$.next(userData);\\n  public getUserData = (): Observable<IUser> => this.userData$.asObservable();\\n  public resetUserData = () => this.userData$.next(new User());\\n}\\n\\n\")), mdx(\"p\", null, \"let's explain our clear service, we have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BehaviorSubject\"), \" observable which will load the data for the form component or any component again! \\uD83D\\uDE0E\\nand some utils for getting, set, and reset, actually you can remove get and set, by making the observable public and make your component pointer directly to that observable. I'll keep it clear. \\uD83C\\uDF1A\"), mdx(\"p\", null, \"let's move to our component, you will notice no modules or dependencies required for the process except our state service. and we will try to make our form contains different possible data types: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"number\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"boolean\"), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"observable-form.component.ts\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"import {Observable} from 'rxjs';\\nimport {StateService} from '../state.service';\\n\\nexport class ObservableFormComponent implements OnInit {\\n  userData$: Observable<IUser>;\\n\\n  ngOnInit(): void {\\n    this.userData$ = this.stateService.getUserData();\\n  }\\n\\n  onSubmit= () => {\\n    let data: any; \\n    this.userData$.subscribe(user => data = user);\\n    console.log(data);\\n  }\\n\\n  onReset= () => this.stateService.resetUserData();\\n\\n  constructor(private stateService: StateService) { }\\n}\\n\")), mdx(\"p\", null, \"that's it! let's explain. what we have:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userData$\"), \" the component observable which will listen to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BehaviorSubject\"), \" we initialized at state service for use in our component HTML and Typescript.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onReset\"), \": the utility responsible for reset data, maybe after the submit and getting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ok\"), \" response from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"API\"), \", or whatever!\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onSubmit\"), \": again the place we collect the data (current observable value), you can use any Rxjs technique to fetch and again you can make the  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BehaviorSubject\"), \" public and another option will be available to get the current data or make third util at service: \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"const data = this.stateService.userData$.value;\\n// or in service\\npublic getCurrentUserData = (): IUser => this.userData$.value;\\n\")), mdx(\"p\", null, \"we will go with the current approach for now, and finally, the time to link all that we made by the view, in fact, we didn't make huge thing it simple, and you will find it simplest when usually use it.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"observable-form.component.html\"), \":\\nNote: we will add examples of control just the shoot you say Ahaa!, you will find the complete example at Github repo.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<div *ngIf=\\\"(userData$ | async) && userData$ | async as user\\\">\\n  <input [(ngModel)]=\\\"user.name\\\" type=\\\"text\\\">\\n  <input [(ngModel)]=\\\"user.active\\\" type=\\\"checkbox\\\">\\n  <button (click)=\\\"onSubmit()\\\">Save</button>\\n  <button (click)=\\\"onReset()\\\">Reset</button>\\n</div>\\n\")), mdx(\"p\", null, \"that's it, we are done now let your controls working with Rxjs and angular two data binding, you can catch a fresh copy of data instantly at HTML or your logic code, for example, you can bind HTML elements properties on your observable value, Yeah! \\uD83D\\uDC7B \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<button [class]=\\\"user.age && user.age < 18 ? 'cursor-not-allowed': 'cursor-pointer'\\\" (click)=\\\"onSubmit()\\\">Save</button>\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://media.giphy.com/media/S9nxk7qDUx2YfM3cVC/giphy.gif\",\n    \"alt\": \"GIF\"\n  }))), mdx(\"p\", null, \"#another HINT \\uD83C\\uDF99\\uFE0F\"), mdx(\"p\", null, \"as debugging you can do kind of this to catch whole picture and the power of what you made: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<p>Form Data</p>\\n<pre>{{ userData$ | async | json }}</pre>\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://dev-to-uploads.s3.amazonaws.com/i/4agkycrpwjqcwsz15okf.gif\",\n    \"alt\": \"debugging\"\n  }))), mdx(\"p\", null, \"#Concolusion \\uD83D\\uDD90\\uFE0F\"), mdx(\"p\", null, \"we discussed forms tips for angular development by using built-in frameworks tools, Rxjs, and Data binding. in a short straight forward way, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BUT\"), \" this approach not Exclusive at angular think about it Rxjs is an isolated package that you can use and the second part is a data binding (Two way for making controls instantly update the observable) is a behavior that another framework can offer like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VueJs\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"v-model\"), \" directive.\\nthought sharing is welcomed since all of that post is just a personal point of view through daily experience.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/muhammedMoussa/angular-forms-tips\"\n  }), \"Github Repo\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://angular-forms-tips.netlify.app/\"\n  }), \"Live Demo\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/muhammedmoussa\"\n  }), \"Find Me on Twitter\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Hack Angular Forms With Rxjs ðŸ”¥","date":"2020 May 17th"}}},"pageContext":{"id":"dffb6fe3-e752-5ce9-abda-51337b1608d2"}},"staticQueryHashes":["3159585216","717330468"]}